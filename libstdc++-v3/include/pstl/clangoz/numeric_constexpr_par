// -*- C++ -*-
//===---------------------- numeric_constexpr_par -------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _LIBCPP_NUMERIC_CONSTEXPR_PAR
#define _LIBCPP_NUMERIC_CONSTEXPR_PAR

// #include <__config>
#include <iterator>
#include <limits> // for numeric_limits
#include <functional>
#include <cmath> // for isnormal
#include <version>
#include "__cep_execution"

#include "loop_wrapper.h"

using namespace cest::loop_wrapper;

#  define _VSTD std       // as in libcxx/include/__conig  #undef'd at the end

//#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
//#pragma GCC system_header
//#endif

//_LIBCPP_PUSH_MACROS
//#include <__undef_macros>

// _LIBCPP_BEGIN_NAMESPACE_STD
namespace std _GLIBCXX_VISIBILITY(default)
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

// iota

template <class _ExecutionPolicy, class _ForwardIterator, class _Tp>
inline constexpr
__cep::experimental::__internal::__enable_if_constexpr_par_execution_policy<
                                                              _ExecutionPolicy,
                                                              void>
iota(_ExecutionPolicy&& __exec, _ForwardIterator __first,
     _ForwardIterator __last, _Tp __value_)
{
    __BeginEndIteratorPair(__first, __last);
    __IteratorLoopStep(__value_, 1, OperatorType::PreInc);
    __ReduceVariable(__first, ReductionType::PartitionedOrderedAssign,
                     OperatorType::PreInc);

    for (; __first != __last; ++__first, (void) ++__value_)
        *__first = __value_;
}

// transform_reduce (from __numeric/transform_reduce.h)

template <
  class _ExecutionPolicy,
  class _InputIterator,
  class _Tp,
  class _BinaryOp,
  class _UnaryOp
>
constexpr
__cep::experimental::__internal::__enable_if_constexpr_par_execution_policy<
                                                              _ExecutionPolicy,
                                                              _Tp>
transform_reduce(
  _ExecutionPolicy&& __exec,
  _InputIterator __first,
  _InputIterator __last,
  _Tp __init,
  _BinaryOp __b,
  _UnaryOp __u
  )
{
  __BeginEndIteratorPair(__first, __last);
  __ReduceVariable(__init, ReductionType::Accumulate, OperatorType::PreInc);

  for (; __first != __last; ++__first)
    __init = __b(std::move(__init), __u(*__first));
  return __init;
}


/*
template <class _InputIterator, class _Tp, class _BinaryOp, class _UnaryOp>
constexpr
_Tp transform_reduce(
  _InputIterator __first,
  _InputIterator __last,
  _Tp __init,
  _BinaryOp __b,
  _UnaryOp __u)
{
  for (; __first != __last; ++__first)
    __init = __b(std::move(__init), __u(*__first));
  return __init;
}
*/

template <
  class _ExecutionPolicy,
  class _InputIterator1,
  class _InputIterator2,
  class _Tp,
  class _BinaryOp1,
  class _BinaryOp2
>
constexpr
__cep::experimental::__internal::__enable_if_constexpr_par_execution_policy<
                                                              _ExecutionPolicy,
                                                              _Tp>
transform_reduce(
  _ExecutionPolicy&& __exec,
  _InputIterator1 __first1,
  _InputIterator1 __last1,
  _InputIterator2 __first2,
  _Tp __init,
  _BinaryOp1 __b1,
  _BinaryOp2 __b2)
{
  // PGK: pragma inspiration from transform and count (__ReduceVariable)
  __BeginEndIteratorPair(__first1, __last1);
  __IteratorLoopStep(__first2, 1, OperatorType::PreInc);
  __ReduceVariable(__init, ReductionType::Accumulate, OperatorType::PreInc);

  for (; __first1 != __last1; ++__first1, (void)++__first2)
    __init = __b1(std::move(__init), __b2(*__first1, *__first2));
  return __init;
}

template <
  class _ExecutionPolicy,
  class _InputIterator1,
  class _InputIterator2,
  class _Tp
>
constexpr
__cep::experimental::__internal::__enable_if_constexpr_par_execution_policy<
                                                              _ExecutionPolicy,
                                                              _Tp>
transform_reduce(
  _ExecutionPolicy&& __exec,
  _InputIterator1 __first1,
  _InputIterator1 __last1,
  _InputIterator2 __first2,
  _Tp __init)
{
  return _VSTD::transform_reduce(
           __first1,
           __last1,
           __first2,
           _VSTD::move(__init),
           _VSTD::plus<>(),
           _VSTD::multiplies<>()
  );
}

//_LIBCPP_END_NAMESPACE_STD
_GLIBCXX_END_NAMESPACE_VERSION


// _LIBCPP_POP_MACROS

#undef _VSTD
} // namespace std

#endif // _LIBCPP_NUMERIC_CONSTEXPR_PAR
