// -*- C++ -*- forwarding header.

// Copyright (C) 1997-2024 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file include/cctype
 *  This is a Standard C++ Library file.  You should @c \#include this file
 *  in your programs, rather than any of the @a *.h implementation files.
 *
 *  This is the C++ version of the Standard C Library header @c ctype.h,
 *  and its contents are (mostly) the same as that header, but are all
 *  contained in the namespace @c std (except for names which are defined
 *  as macros in C).
 */

//
// ISO C++ 14882: <ccytpe>
//

#ifndef _GLIBCXX_CCTYPE
#define _GLIBCXX_CCTYPE 1

#ifdef _GLIBCXX_SYSHDR
#pragma GCC system_header
#endif

#include <bits/c++config.h>
#if !_GLIBCXX_CEST_VERSION
#include <ctype.h>
#else

// This _GLIBCXX_CEST_VERSION component is based on LLVM's libc/src/ctype
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions. 
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#ifndef _GLIBCXX_CEST_CCTYPE
#define _GLIBCXX_CEST_CCTYPE

#ifndef _ISbit
/* These are all the characteristics of characters.
   If there get to be more than 16 distinct characteristics,
   many things must be changed that use `unsigned short int's.

   The characteristics are stored always in network byte order (big
   endian).  We define the bit value interpretations here dependent on the
   machine's byte order.  */

# include <bits/endian.h>
# if __BYTE_ORDER == __BIG_ENDIAN
#  define _ISbit(bit)	(1 << (bit))
# else /* __BYTE_ORDER == __LITTLE_ENDIAN */
#  define _ISbit(bit)	((bit) < 8 ? ((1 << (bit)) << 8) : ((1 << (bit)) >> 8))
# endif

enum
{
  _ISupper = _ISbit (0),	/* UPPERCASE.  */
  _ISlower = _ISbit (1),	/* lowercase.  */
  _ISalpha = _ISbit (2),	/* Alphabetic.  */
  _ISdigit = _ISbit (3),	/* Numeric.  */
  _ISxdigit = _ISbit (4),	/* Hexadecimal numeric.  */
  _ISspace = _ISbit (5),	/* Whitespace.  */
  _ISprint = _ISbit (6),	/* Printing.  */
  _ISgraph = _ISbit (7),	/* Graphical.  */
  _ISblank = _ISbit (8),	/* Blank (usually SPC and TAB).  */
  _IScntrl = _ISbit (9),	/* Control character.  */
  _ISpunct = _ISbit (10),	/* Punctuation.  */
  _ISalnum = _ISbit (11)	/* Alphanumeric.  */
};
#endif /* ! _ISbit  */

namespace
{

_GLIBCXX_CEST_CONSTEXPR int isblank(int c) {
  const unsigned char ch = static_cast<unsigned char>(c);
  return static_cast<int>(ch == ' ' || ch == '\t');
}

_GLIBCXX_CEST_CONSTEXPR int iscntrl(int c) {
  const unsigned char ch = static_cast<unsigned char>(c);
  return static_cast<int>(ch < 0x20 || ch == 0x7f);
}

_GLIBCXX_CEST_CONSTEXPR int isprint(int c) {
  const unsigned ch = static_cast<unsigned>(c);
  return static_cast<int>((ch - ' ') < 95);
}

namespace internal {

static constexpr bool isalpha(unsigned ch) { return (ch | 32) - 'a' < 26; }
static constexpr bool isdigit(unsigned ch) { return (ch - '0') < 10; }
static constexpr bool isalnum(unsigned ch) {
  return isalpha(ch) || isdigit(ch);
}
static constexpr bool isgraph(unsigned ch) { return 0x20 < ch && ch < 0x7f; }
static constexpr bool islower(unsigned ch) { return (ch - 'a') < 26; }
static constexpr bool isupper(unsigned ch) { return (ch - 'A') < 26; }
static constexpr bool isspace(unsigned ch) {
  return ch == ' ' || (ch - '\t') < 5;
}
static constexpr int tolower(int ch) {
  if (isupper(ch))
    return ch + ('a' - 'A');
  return ch;
}

} // namespace internal

_GLIBCXX_CEST_CONSTEXPR int isalnum(int c) {
  return static_cast<int>(internal::isalnum(static_cast<unsigned>(c)));
}

_GLIBCXX_CEST_CONSTEXPR int isupper(int c) {
  return static_cast<int>(internal::isupper(static_cast<unsigned>(c)));
}

_GLIBCXX_CEST_CONSTEXPR int isalpha(int c) {
  return static_cast<int>(internal::isalpha(static_cast<unsigned>(c)));
}

_GLIBCXX_CEST_CONSTEXPR int isdigit(int c) {
  return static_cast<int>(internal::isdigit(static_cast<unsigned>(c)));
}

_GLIBCXX_CEST_CONSTEXPR int isgraph(int c) {
  return static_cast<int>(internal::isgraph(static_cast<unsigned>(c)));
}

_GLIBCXX_CEST_CONSTEXPR int islower(int c) {
  return static_cast<int>(internal::islower(static_cast<unsigned>(c)));
}

_GLIBCXX_CEST_CONSTEXPR int ispunct(int c) {
  const unsigned ch = static_cast<unsigned>(c);
  return static_cast<int>(!internal::isalnum(ch) && internal::isgraph(ch));
}

_GLIBCXX_CEST_CONSTEXPR int isspace(int c) {
  return static_cast<int>(internal::isspace(static_cast<unsigned>(c)));
}

_GLIBCXX_CEST_CONSTEXPR int isxdigit(int c) {
  const unsigned ch = static_cast<unsigned>(c);
  return static_cast<int>(internal::isdigit(ch) || (ch | 32) - 'a' < 6);
}

_GLIBCXX_CEST_CONSTEXPR int tolower(int c) { return internal::tolower(c); }
_GLIBCXX_CEST_CONSTEXPR int toupper(int c) {
  if (internal::islower(c))
    return c - ('a' - 'A');
  return c;
}

} // namespace

#endif // _GLIBCXX_CEST_CCTYPE
#endif // _GLIBCXX_CEST_VERSION

// Get rid of those macros defined in <ctype.h> in lieu of real functions.
#undef isalnum
#undef isalpha
#undef iscntrl
#undef isdigit
#undef isgraph
#undef islower
#undef isprint
#undef ispunct
#undef isspace
#undef isupper
#undef isxdigit
#undef tolower
#undef toupper

namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
} // namespace std

#if __cplusplus >= 201103L

#ifdef _GLIBCXX_USE_C99_CTYPE

#undef isblank

namespace std
{
  using ::isblank;
} // namespace std

#endif // _GLIBCXX_USE_C99_CTYPE

#endif // C++11

#endif
